//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mocosha.SoapTestClient.SimpleService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadResultOfstring", Namespace="http://schemas.datacontract.org/2004/07/Mocosha.Library.KeyValueStore")]
    [System.SerializableAttribute()]
    public partial class ReadResultOfstring : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WriteResult", Namespace="http://schemas.datacontract.org/2004/07/Mocosha.Library.KeyValueStore")]
    [System.SerializableAttribute()]
    public partial class WriteResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SimpleService.ISimpleService")]
    public interface ISimpleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindAll", ReplyAction="http://tempuri.org/ISimpleService/FindAllResponse")]
        System.Collections.Generic.KeyValuePair<string, string>[] FindAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindAll", ReplyAction="http://tempuri.org/ISimpleService/FindAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> FindAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Find", ReplyAction="http://tempuri.org/ISimpleService/FindResponse")]
        Mocosha.SoapTestClient.SimpleService.ReadResultOfstring Find(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Find", ReplyAction="http://tempuri.org/ISimpleService/FindResponse")]
        System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.ReadResultOfstring> FindAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Add", ReplyAction="http://tempuri.org/ISimpleService/AddResponse")]
        Mocosha.SoapTestClient.SimpleService.WriteResult Add(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Add", ReplyAction="http://tempuri.org/ISimpleService/AddResponse")]
        System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> AddAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Update", ReplyAction="http://tempuri.org/ISimpleService/UpdateResponse")]
        Mocosha.SoapTestClient.SimpleService.WriteResult Update(string id, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Update", ReplyAction="http://tempuri.org/ISimpleService/UpdateResponse")]
        System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> UpdateAsync(string id, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Remove", ReplyAction="http://tempuri.org/ISimpleService/RemoveResponse")]
        Mocosha.SoapTestClient.SimpleService.WriteResult Remove(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Remove", ReplyAction="http://tempuri.org/ISimpleService/RemoveResponse")]
        System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> RemoveAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimpleServiceChannel : Mocosha.SoapTestClient.SimpleService.ISimpleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimpleServiceClient : System.ServiceModel.ClientBase<Mocosha.SoapTestClient.SimpleService.ISimpleService>, Mocosha.SoapTestClient.SimpleService.ISimpleService {
        
        public SimpleServiceClient() {
        }
        
        public SimpleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] FindAll() {
            return base.Channel.FindAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public Mocosha.SoapTestClient.SimpleService.ReadResultOfstring Find(string id) {
            return base.Channel.Find(id);
        }
        
        public System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.ReadResultOfstring> FindAsync(string id) {
            return base.Channel.FindAsync(id);
        }
        
        public Mocosha.SoapTestClient.SimpleService.WriteResult Add(string key, string value) {
            return base.Channel.Add(key, value);
        }
        
        public System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> AddAsync(string key, string value) {
            return base.Channel.AddAsync(key, value);
        }
        
        public Mocosha.SoapTestClient.SimpleService.WriteResult Update(string id, string value) {
            return base.Channel.Update(id, value);
        }
        
        public System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> UpdateAsync(string id, string value) {
            return base.Channel.UpdateAsync(id, value);
        }
        
        public Mocosha.SoapTestClient.SimpleService.WriteResult Remove(string id) {
            return base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleService.WriteResult> RemoveAsync(string id) {
            return base.Channel.RemoveAsync(id);
        }
    }
}
