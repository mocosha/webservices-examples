//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mocosha.SoapTestClient.SimpleStorage {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Animal", Namespace="http://schemas.datacontract.org/2004/07/Mocosha.WcfService.SimpleStorage")]
    [System.SerializableAttribute()]
    public partial class Animal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseOfAnimalRKSw_P_P4R", Namespace="http://schemas.datacontract.org/2004/07/Mocosha.WcfService.SimpleStorage")]
    [System.SerializableAttribute()]
    public partial class ResponseOfAnimalRKSw_P_P4R : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Mocosha.SoapTestClient.SimpleStorage.Animal ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Mocosha.SoapTestClient.SimpleStorage.Animal Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SimpleStorage.ISimpleService")]
    public interface ISimpleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/GetAll", ReplyAction="http://tempuri.org/ISimpleService/GetAllResponse")]
        System.Collections.Generic.Dictionary<string, string> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/GetAll", ReplyAction="http://tempuri.org/ISimpleService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindById", ReplyAction="http://tempuri.org/ISimpleService/FindByIdResponse")]
        string FindById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindById", ReplyAction="http://tempuri.org/ISimpleService/FindByIdResponse")]
        System.Threading.Tasks.Task<string> FindByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Add", ReplyAction="http://tempuri.org/ISimpleService/AddResponse")]
        string Add(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Add", ReplyAction="http://tempuri.org/ISimpleService/AddResponse")]
        System.Threading.Tasks.Task<string> AddAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/AddWithKey", ReplyAction="http://tempuri.org/ISimpleService/AddWithKeyResponse")]
        string AddWithKey(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/AddWithKey", ReplyAction="http://tempuri.org/ISimpleService/AddWithKeyResponse")]
        System.Threading.Tasks.Task<string> AddWithKeyAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Update", ReplyAction="http://tempuri.org/ISimpleService/UpdateResponse")]
        string Update(string id, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Update", ReplyAction="http://tempuri.org/ISimpleService/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string id, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Remove", ReplyAction="http://tempuri.org/ISimpleService/RemoveResponse")]
        string Remove(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/Remove", ReplyAction="http://tempuri.org/ISimpleService/RemoveResponse")]
        System.Threading.Tasks.Task<string> RemoveAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/AddAnimal", ReplyAction="http://tempuri.org/ISimpleService/AddAnimalResponse")]
        string AddAnimal(string key, Mocosha.SoapTestClient.SimpleStorage.Animal animal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/AddAnimal", ReplyAction="http://tempuri.org/ISimpleService/AddAnimalResponse")]
        System.Threading.Tasks.Task<string> AddAnimalAsync(string key, Mocosha.SoapTestClient.SimpleStorage.Animal animal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindAnimalById", ReplyAction="http://tempuri.org/ISimpleService/FindAnimalByIdResponse")]
        Mocosha.SoapTestClient.SimpleStorage.ResponseOfAnimalRKSw_P_P4R FindAnimalById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/FindAnimalById", ReplyAction="http://tempuri.org/ISimpleService/FindAnimalByIdResponse")]
        System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleStorage.ResponseOfAnimalRKSw_P_P4R> FindAnimalByIdAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimpleServiceChannel : Mocosha.SoapTestClient.SimpleStorage.ISimpleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimpleServiceClient : System.ServiceModel.ClientBase<Mocosha.SoapTestClient.SimpleStorage.ISimpleService>, Mocosha.SoapTestClient.SimpleStorage.ISimpleService {
        
        public SimpleServiceClient() {
        }
        
        public SimpleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public string FindById(string id) {
            return base.Channel.FindById(id);
        }
        
        public System.Threading.Tasks.Task<string> FindByIdAsync(string id) {
            return base.Channel.FindByIdAsync(id);
        }
        
        public string Add(string value) {
            return base.Channel.Add(value);
        }
        
        public System.Threading.Tasks.Task<string> AddAsync(string value) {
            return base.Channel.AddAsync(value);
        }
        
        public string AddWithKey(string key, string value) {
            return base.Channel.AddWithKey(key, value);
        }
        
        public System.Threading.Tasks.Task<string> AddWithKeyAsync(string key, string value) {
            return base.Channel.AddWithKeyAsync(key, value);
        }
        
        public string Update(string id, string value) {
            return base.Channel.Update(id, value);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string id, string value) {
            return base.Channel.UpdateAsync(id, value);
        }
        
        public string Remove(string id) {
            return base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAsync(string id) {
            return base.Channel.RemoveAsync(id);
        }
        
        public string AddAnimal(string key, Mocosha.SoapTestClient.SimpleStorage.Animal animal) {
            return base.Channel.AddAnimal(key, animal);
        }
        
        public System.Threading.Tasks.Task<string> AddAnimalAsync(string key, Mocosha.SoapTestClient.SimpleStorage.Animal animal) {
            return base.Channel.AddAnimalAsync(key, animal);
        }
        
        public Mocosha.SoapTestClient.SimpleStorage.ResponseOfAnimalRKSw_P_P4R FindAnimalById(string id) {
            return base.Channel.FindAnimalById(id);
        }
        
        public System.Threading.Tasks.Task<Mocosha.SoapTestClient.SimpleStorage.ResponseOfAnimalRKSw_P_P4R> FindAnimalByIdAsync(string id) {
            return base.Channel.FindAnimalByIdAsync(id);
        }
    }
}
